{"version":3,"sources":["Components/YTubeFrame.js","Components/AdProgram.js","Components/VideoProgram.js","Components/AdSpace.js","Layouts/Universal.js","App.js","serviceWorker.js","index.js"],"names":["YTubeFrame","props","_props$video","video","url","title","react_default","a","createElement","id","src","frameBorder","allow","allowFullScreen","autoPlay","ads","get","adData","length","runProgram","_this","this","adArray","i","j","adsPerDay","push","createAdArray","_loop","max","Math","floor","random","setInterval","console","log","currentVideo","splice","VideoProgram","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","videoIndex","running","checkData","videos","start","data","hasData","indexIsGood","e","setState","play","nextVideo","stop","newIndex","setTimeout","_this2","delay","Component","AdSpace","adObj","className","alt","Universal","_this$props$data","mapUrl","orientation","header","dataBottomDescriptor","dataTop","dataBottom","checkOrientation","includes","renderData","placement","map","el","concat","key","name","toUpperCase","suite","VideoProgram_VideoProgram","App","pathName","window","location","pathname","slice","split","building","tvIndex","axios","then","res","tv","catch","err","Layouts_Universal","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3f12ef5.chunk.js","sourcesContent":["import React from 'react';\n\n/*\n*Sample obj from ads\n*\n*   {\n*       name: \"company_name\",                                   // string name to maybe scroll or something in the future\n*       url: \"www.youtube.com/embed/adsgfkjhsfa?autoplay=1\",    // string string representing direct url to video\n*       adsPerDay: 3                                            // number for # of views in a day\n*       timeRequested: 1230                                     // number for military time\n*   }\n*https://final.simustream.com/watch/ryoulive/fd188ce355638986373ef230fbb28fd8\n*/\n\nexport default function YTubeFrame (props) {\n\n    const { url, title } = props.video;\n    return(\n        <iframe\n            id='player'\n            title={title}\n            src={url}\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n            autoPlay=\"1\"\n            >\n        </iframe>\n    )\n}","import adData from '../Buildings/videoData_Ads.json';\n\nconst ads = {\n    get: function () {\n        if (adData.length){\n            return adData;\n        } else return false;\n    },\n    runProgram: function () {\n        let adArray = [];\n\n        function createAdArray (){\n            for (let i = 0; i < adData.length; i++){\n                for (let j = 0; j < adData[i].adsPerDay; j++){\n                    adArray.push(adData[i]);\n                }\n            }\n        }\n\n        function randomNum (max){\n            return Math.floor(Math.random() * Math.floor(max));\n        }\n        createAdArray();\n        for (let a = 0; a < adArray.length; a++){\n            let i = adArray[randomNum(adArray.length)]\n            //set random timer to first video\n            setInterval(()=>{\n                console.log(adArray)\n                //set video\n                this.currentVideo = adArray[i];\n                //delete video from array\n                adArray.splice(i, 1);\n            }, 10000)\n\n\n\n        }\n        this.currentVideo = null;\n    },\n    currentVideo: null\n}\nexport default ads;","import React, {Component} from 'react';\nimport YTubeFrame from './YTubeFrame';\nimport ads from './AdProgram';\n\nimport videos from '../Buildings/videoData_Simustream.json';\n\nexport default class VideoProgram extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            videoIndex: 0,\n            currentVideo: {}, \n            running: false\n        };\n    }\n    \n    componentDidMount() {\n        if(this.checkData(videos)){\n            // console.log('data found')\n            this.start();\n        };\n        // if(ads.get()){\n        //     ads.runProgram();\n        // };\n    }\n\n    checkData(data){\n        if(this.hasData(data) &&  this.indexIsGood(data)){\n            return true\n        }\n    }\n\n    hasData(data){\n        // if(!videos.length) throw \"no data found\";\n        try{\n            if(data.length) return true\n        }\n        catch (e){\n            console.log(e);\n        }\n    }\n\n    indexIsGood(data){\n        if(this.state.videoIndex < data.length){\n            return true;\n        } else return false\n    }\n\n\n    async start(){\n        await this.setState({\n            videoIndex: 0,\n            currentVideo: videos[0]\n        });\n        this.play();\n    }\n\n    async play(){\n        console.log('play')\n        await this.setState({\n            running: true\n        });\n        this.nextVideo();\n    }\n\n    playPause(){\n        if (this.state.running){\n            this.stop();\n        } else {\n            this.play();\n        }\n    }\n\n    stop(){\n        console.log('stop')\n        this.setState({\n            running: false\n        })\n    }\n\n    checkAds(){\n        if(ads.currentVideo) return true;\n        return false;\n    }\n\n    async nextVideo() {\n        // console.log('next video')\n        const { videoIndex, currentVideo } = this.state;\n        let newIndex = videoIndex + 1;\n        console.log(ads.currentVideo)\n        if (ads.currentVideo){\n            await setTimeout(()=>{\n                this.setState({\n                    currentVideo: ads.currentVideo\n                });\n                // this.nextVideo();\n            }, currentVideo.delay * 1000)\n        } else\n        if (newIndex === videos.length){\n            // console.log('last video')\n            this.start();\n\n        } else {\n            await setTimeout(()=>{\n                this.setState({\n                    videoIndex: newIndex,\n                    currentVideo: videos[newIndex]\n                });\n                this.nextVideo();\n            }, currentVideo.delay * 1000)\n        }\n    }\n  \n    render() {\n        const { currentVideo } = this.state;\n            return (\n                currentVideo && < YTubeFrame video={currentVideo}/>\n            );\n    }\n  }","import React from 'react';\n\nexport default function AdSpace(adObj){\n    // if (adObj){\n    //     return (\n    //         <div className='adSpace'>\n    //             <img className='adSpaceLogo' src={adObj.url} alt={adObj.title}></img>\n    //         </div>\n\n    //     )\n    // }else {\n        return (\n            <div className='adSpace'>\n                <div className=\"adText\" >To advertise here contact Suite 505</div>\n                <img id=\"gsemlogo\" className='adSpaceLogo' src='https://gsemtechnologies.com/wp-content/uploads/2018/01/GSEMLOGO-1.png' alt='Ad logo'></img>\n                <div className=\"adText\" >Your logo here</div>\n            </div>\n        )\n    // }\n}","import React, { Component } from 'react';\nimport VideoPlayer from '../Components/VideoProgram';\nimport AdSpace from '../Components/AdSpace';\n\nclass Universal extends Component {\n    render(){\n        const {\n          mapUrl,\n          orientation,\n          // tvName, layout, adSpaceUrl,\n          header,\n          dataBottomDescriptor,\n          dataTop,\n          dataBottom\n        } = this.props.data;\n\n        const checkOrientation = orientation.includes('portrait') ? 'Universal Container-vertical' : 'Universal Container';\n        \n        const renderData = function (data, placement){\n            return data.map((el, i)=>{\n                return (\n                    <div className={`suite ${placement}`} key={`${placement}_${i}`}>\n                        <span className='suiteName'>{el.name.toUpperCase()}</span>\n                        <span className='suiteNumber'>{el.suite}</span>\n                    </div>\n                )\n            })\n        }\n\n        return(\n            <div className={checkOrientation}>\n              < AdSpace />\n              <img id='simustreamLogo' src='https://gsemtechnologies.com/wp-content/uploads/2018/01/SimustreamWebHorizontal-website-550x400.png' alt='Simustream company Logo'></img>\n              <div className='header'><h1>{header}</h1></div>\n              < VideoPlayer />\n              <img alt=\"map for this floor\" className='map' src={mapUrl}></img>\n              <div className='data'>\n                <div className='label' >THIS LEVEL</div>\n                {renderData(dataTop, 'top')}\n                <div className='label bottom' >{dataBottomDescriptor.toUpperCase()}</div>\n                {renderData(dataBottom, 'bottom')}\n              </div>\n            </div>\n        )\n    }\n}\n\nexport default Universal;","import React,  { Component } from 'react';\nimport Universal from './Layouts/Universal';\nimport axios from 'axios';\nimport './App.scss'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n    }\n  }\n\n  pathName = window.location.pathname.slice(1).split('/');\n\n  // grabs the tv request from the url\n  location = {\n    building: this.pathName[1],\n    tvIndex: this.pathName[2]\n  }\n\n  componentDidMount(){\n    axios.get(`http://localhost:3031/tvdata/${this.location.building}/${this.location.tvIndex}`)\n      .then( res=>{\n        if (res.data) {\n          this.setState({\n            tv: res.data\n          });\n\n        }\n      })\n      .catch(err=>console.log('no data from backend'));\n  }\n\n  render(){\n    const { tv } = this.state;\n    if(tv && tv.orientation && tv.dataBottom.length)\n    {\n      return < Universal data={tv} />\n    }\n    else \n    {\n      return <div>  Undefined Route... format should be /tvData/[buildingName]/[tv number]  </div>\n    }\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}