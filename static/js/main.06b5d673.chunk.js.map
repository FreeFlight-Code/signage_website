{"version":3,"sources":["Pages/HomePage.js","Pages/UpperPage.js","App.js","serviceWorker.js","index.js"],"names":["App","console","log","window","location","react_default","a","createElement","className","href","Component","upper","suiteData","lower","UpperPage","imageMap","backgroundImage","pathname","replace","isRotated","transform","upperSuites","length","map","el","i","key","concat","name","suite","lowerSuites","style","this","id","title","src","videoData","frameBorder","allow","allowFullScreen","HomePage","src_Pages_UpperPage","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"83BAeeA,mLAVX,OADEC,QAAQC,IAAIC,OAAOC,UAEnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,YAEEH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,UAAR,eACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,UAAR,uBAPUC,2BCGZC,SAAQC,EAAUD,OAClBE,EAAQD,EAAUC,MA4FTC,6MAvFXC,SAAW,CACPJ,MAAO,CAACK,gBAAiB,2HACzBH,MAAO,CAACG,gBAAiB,0LAMzB,IAAIZ,EAAWD,OAAOC,SAASa,SAASC,QAAQ,cAAe,IACzDC,EACe,UAAbf,EACO,CACHgB,UAAW,mCAEL,KAEZC,EAAc,WAChB,OAAIV,EAAMW,OACEX,EAAMY,IAAI,SAACC,EAAIC,GACnB,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQkB,IAAG,cAAAC,OAAgBF,IACtCpB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAagB,EAAGI,MAChCvB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAegB,EAAGK,UAM9CxB,EAAAC,EAAAC,cAAA,uBAGFuB,EAAc,WAChB,OAAIjB,EAAMS,OACET,EAAMU,IAAI,SAACC,EAAIC,GACnB,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQkB,IAAG,cAAAC,OAAgBF,IACtCpB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAagB,EAAGI,MAChCvB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAegB,EAAGK,UAM9CxB,EAAAC,EAAAC,cAAA,uBAGZ,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUuB,MAAOZ,GAC5Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,yBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKuB,MAAoB,UAAb3B,EAAuB4B,KAAKjB,SAASJ,MAAQqB,KAAKjB,SAASF,QAGtFR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACG,UAAbJ,EAAuBiB,IAAeS,KAE3CzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAAKuB,MAAoB,UAAb3B,EAAuB4B,KAAKjB,SAASF,MAAQmB,KAAKjB,SAASJ,OAClFN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAyB,UAAbJ,EAAuB,aAAe,aAEpEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACG,UAAbJ,EAAuB0B,IAAgBT,KAG5ChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAInBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBuB,MAAOZ,GACtCd,EAAAC,EAAAC,cAAA,UACI0B,GAAG,6BACHC,MAAM,6BAENC,IAAG,kDAAAR,OAAoDS,EAAU,IACjEC,YAAY,IACZC,MAAM,0EACNC,iBAAe,IAEnBlC,EAAAC,EAAAC,cAAA,wDAlFYG,aCCTV,MANf,WACE,MAAgC,MAA7BG,OAAOC,SAASa,SACZZ,EAAAC,EAAAC,cAAEiC,EAAF,MACKnC,EAAAC,EAAAC,cAAEkC,EAAF,OCKMC,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06b5d673.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n      console.log(window.location)\n    return (\n      <div className=\"App\">\n        Home Page\n        <a href='/lower'>Lower Level</a>\n        <a href='/upper'>Upper Level</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport suiteData from \"./data.json\";\nimport videoData from \"./videoData.json\";\nimport './UpperPage.css'\nconst upper = suiteData.upper;\nconst lower = suiteData.lower;\n\n\nclass UpperPage extends Component {\n\n    imageMap = {\n        upper: {backgroundImage: \"url(https://www.frontrange.edu/images/default-source/default-album/campus-maps/lc-redcloud-peak.jpg?sfvrsn=2b9704a7_10)\"},\n        lower: {backgroundImage: \"url(https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRpLsehmf34QmCGXmA6wzbByzduV1PIvCR5pB-MGkAY3weifwXU)\"}\n    }\n    \n\n\n    render() {\n        let location = window.location.pathname.replace(/[^a-zA-Z]+/g, '');\n        const isRotated = (()=>{\n            if (location === 'lower'){\n                return {\n                    transform: \"rotate(90deg) translateY(-10vh)\"\n                }\n            } else return null\n        })()\n        const upperSuites = ()=>{\n            if (upper.length){\n                return (upper.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`UpperSuite_${i}`}>\n                            <span className='suiteName'>{el.name}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n        const lowerSuites = ()=>{\n            if (lower.length){\n                return (lower.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`LowerSuite_${i}`}>\n                            <span className='suiteName'>{el.name}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n    return (\n      <div className=\"UpperPageContainer\">\n        <div className='mapSide' style={isRotated}>\n            <div className='headerBar'>\n                <span className='blackburn'>Blackburn Building II</span>\n                <div className='gsemLogo'></div>\n            </div>\n            <div className='q1' style={location === 'upper' ? this.imageMap.upper : this.imageMap.lower }>\n                \n            </div>\n            <div className='q2'>\n                {location === 'upper' ? upperSuites() :lowerSuites()}\n            </div>\n            <div className='q3' style={location === 'upper' ? this.imageMap.lower : this.imageMap.upper }>\n                <h6 className='location'>{location === 'upper' ? 'Downstairs' : 'Upstairs'}</h6>\n            </div>\n            <div className='q4'>\n                {location === 'upper' ? lowerSuites() : upperSuites()}\n\n            </div>\n            <div className='q5'>\n                \n            </div>\n        </div>\n        <div className='advertisementSide' style={isRotated} >\n            <iframe\n                id='advertisement_upper_screen'\n                title='advertisement_upper_screen'\n                // src={`https://www.youtube.com/embed/${videoData[0]}`}\n                src={`https://simustream.com/watch/gsem_technologies/${videoData[0]}`}\n                frameBorder=\"0\" \n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                allowFullScreen>\n            </iframe>\n            <div>Advertise here contact Suite 505</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UpperPage;\n","import React from 'react';\nimport Home from './Pages/HomePage'\nimport UpperPage from './Pages/UpperPage'\n\nfunction App (){\n  if(window.location.pathname === '/')\n  return < Home />\n  else return < UpperPage />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}