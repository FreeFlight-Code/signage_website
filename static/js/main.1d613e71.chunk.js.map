{"version":3,"sources":["images/BR_vert_upper.jpg","Pages/UpperPage.js","Pages/LowerPage.js","Pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UpperPage","_this$props","this","props","streams","suites","stream","react_default","a","createElement","className","onClick","handleClick","src","upperLevelImage","alt","upper","length","map","el","i","key","concat","name","toUpperCase","suite","lower","id","title","frameBorder","allow","allowFullScreen","Component","LowerPage","lowerLevelImage","HomePage","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","upperTV","state","src_Pages_UpperPage","streamData","suiteData","bind","src_Pages_LowerPage","App","Pages_HomePage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d613e71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BR_vert_upper.ec552434.jpg\";","import React, { Component } from 'react';\nimport './UpperPage.css'\nimport upperLevelImage from '../images/BR_vert_upper.jpg'\n\nclass UpperPage extends Component {\n\n    render() {\n        const { streams, suites } = this.props; \n        const stream = (()=>{\n            return streams[0];\n        })()\n        const upperSuites = ()=>{\n            if (suites.upper.length){\n                return (suites.upper.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`UpperSuite_${i}`}>\n                            <span className='suiteName'>{el.name.toUpperCase()}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n        const lowerSuites = ()=>{\n            if (suites.lower.length){\n                return (suites.lower.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`LowerSuite_${i}`}>\n                            <span className='suiteName'>{el.name.toUpperCase()}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n    return (\n      <div className=\"UpperPageContainer\">\n        <div className='blackridge'>Blackridge Building II</div>\n        <div className='gsemLogo' onClick={this.props.handleClick}></div>\n        <div className='mapSide'>\n            <img src={upperLevelImage} className='q1' alt='upper level map'></img>\n            <div className='q2'>\n                <h6>THIS LEVEL</h6>\n                {upperSuites()}\n                <h6>{'DOWNSTAIRS'}</h6>\n                {lowerSuites()}\n\n            </div>\n        </div>\n        <div className='advertisementSide'>\n            <iframe\n                id='advertisement_upper_screen'\n                title='advertisement_upper_screen'\n                src={stream}\n                frameBorder=\"0\" \n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                allowFullScreen>\n            </iframe>\n            <div>To advertise here contact Suite 505</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UpperPage;\n","import React, { Component } from 'react';\nimport './LowerPage.css'\nimport lowerLevelImage from '../images/BR_vert_upper.jpg'\n\nclass LowerPage extends Component {\n\n    render() {\n        const { streams, suites } = this.props; \n        const stream = (()=>{\n            return streams[0];\n        })()\n        const upperSuites = ()=>{\n            if (suites.upper.length){\n                return (suites.upper.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`UpperSuite_${i}`}>\n                            <span className='suiteName'>{el.name.toUpperCase()}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n        const lowerSuites = ()=>{\n            if (suites.lower.length){\n                return (suites.lower.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`LowerSuite_${i}`}>\n                            <span className='suiteName'>{el.name.toUpperCase()}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n    return (\n      <div className=\"LowerPageContainer\">\n        <div className='gsemLogo' onClick={this.props.handleClick}></div>\n        <div className='advertisementSide_lower'>\n            <iframe\n                id='advertisement_lower_screen'\n                title='advertisement_lower_screen'\n                src={stream}\n                frameBorder=\"0\" \n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                allowFullScreen>\n            </iframe>\n            <div>To advertise here contact Suite 505</div>\n        </div>\n        <div className='blackridge_lower'>Blackridge Building II</div>\n        <div className='mapSideVertical'>\n            <img src={lowerLevelImage} alt='lower level map'></img>\n            <div className='suitesVertical'>\n                <h6>THIS LEVEL</h6>\n                {lowerSuites()}\n                <h6>UPSTAIRS</h6>\n                {upperSuites()}\n\n            </div>\n    </div>\n\n      </div>\n    );\n  }\n}\n\nexport default LowerPage;\n","import React, { Component } from 'react';\nimport UpperPage from './UpperPage';\nimport LowerPage from './LowerPage';\nimport streamData from './videoData.json';\nimport suiteData from './data.json';\n\nclass HomePage extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      upperTV: true\n    }\n  }\n\n  handleClick = ()=>{\n    this.setState({\n      upperTV: !this.state.upperTV\n    })\n  }\n\n  render() {\n    if (this.state.upperTV){\n      return (\n          < UpperPage streams={streamData} suites={suiteData} handleClick={this.handleClick.bind(this)}/>\n      );\n    } else {\n      return (\n        < LowerPage streams={streamData} suites={suiteData} handleClick={this.handleClick.bind(this)}/>\n      )\n    }\n  }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport Home from './Pages/HomePage'\n\nfunction App (){\n  return < Home />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}