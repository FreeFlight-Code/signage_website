{"version":3,"sources":["images/BR_vert_upper.jpg","Pages/UpperPage.js","Pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","upper","suiteData","lower","UpperPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","location","state","upstairsTV","upperSuites","length","map","el","i","react_default","a","createElement","className","key","concat","name","toUpperCase","suite","lowerSuites","onClick","src","upperLevelImage","alt","id","title","frameBorder","allow","allowFullScreen","Component","App","src_Pages_UpperPage","HomePage","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0iBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uQCMlCC,EAAQC,EAAUD,MAClBE,EAAQD,EAAUC,MAmFTC,cA/EX,SAAAA,EAAaC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,YAAc,WACVP,EAAKQ,SAAS,CACVC,SAAkC,UAAxBT,EAAKU,MAAMD,SAAuB,QAAU,WAP1DT,EAAKU,MAAQ,CACTD,SAAU,SAHCT,wEAeV,IACCS,EAAaN,KAAKO,MAAlBD,SACFE,EAAc,WAAW,GAAc,UAAXF,EAAoB,OAAO,EAAzC,GACZG,EAAc,WAChB,OAAIjB,EAAMkB,OACElB,EAAMmB,IAAI,SAACC,EAAIC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAG,cAAAC,OAAgBN,IACtCC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaL,EAAGQ,KAAKC,eACrCP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeL,EAAGU,UAM9CR,EAAAC,EAAAC,cAAA,uBAGFO,EAAc,WAChB,OAAI7B,EAAMgB,OACEhB,EAAMiB,IAAI,SAACC,EAAIC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAG,cAAAC,OAAgBN,IACtCC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaL,EAAGQ,KAAKC,eACrCP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeL,EAAGU,UAM9CR,EAAAC,EAAAC,cAAA,uBAGZ,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,0BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWO,QAASxB,KAAKI,cACxCU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAiBT,UAAU,KAAKU,IAAI,oBAC9Cb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,wBACCR,EAAaC,IAAec,IAC7BT,EAAAC,EAAAC,cAAA,UAAKR,EAAa,aAAe,YAChCA,EAAae,IAAgBd,MAItCK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,UACIY,GAAG,6BACHC,MAAM,6BAENJ,IAAG,4CACHK,YAAY,IACZC,MAAM,gFACNC,iBAAe,IAEnBlB,EAAAC,EAAAC,cAAA,2DAzEYiB,aCCTC,mLANX,OACIpB,EAAAC,EAAAC,cAAEmB,EAAF,aAHUF,aCIHC,MAJf,WACE,OAAOpB,EAAAC,EAAAC,cAAEoB,EAAF,OCQWC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.69b19ed0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BR_vert_upper.ec552434.jpg\";","import React, { Component } from 'react';\n\nimport suiteData from \"./data.json\";\n// import videoData from \"./videoData.json\";\nimport './UpperPage.css'\nimport upperLevelImage from '../images/BR_vert_upper.jpg'\nconst upper = suiteData.upper;\nconst lower = suiteData.lower;\n\n\nclass UpperPage extends Component {\n    constructor (props){\n        super(props)\n        this.state = {\n            location: 'upper'\n        }\n    }\n\n    handleClick = ()=>{\n        this.setState({\n            location: this.state.location === 'upper' ? 'lower' : 'upper'\n        })\n    }\n    \n\n\n    render() {\n        let { location } = this.state;\n        let upstairsTV = (function(){if(location!==\"lower\"){return true}})();\n        const upperSuites = ()=>{\n            if (upper.length){\n                return (upper.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`UpperSuite_${i}`}>\n                            <span className='suiteName'>{el.name.toUpperCase()}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n        const lowerSuites = ()=>{\n            if (lower.length){\n                return (lower.map((el, i)=>{\n                    return (\n                        <div className='suite' key={`LowerSuite_${i}`}>\n                            <span className='suiteName'>{el.name.toUpperCase()}</span>\n                            <span className='suiteNumber'>{el.suite}</span>\n                            \n                        </div>\n                    )\n                }))\n            } else return (\n                <div>no data</div>\n            )\n        }\n    return (\n      <div className=\"UpperPageContainer\">\n        <div className='blackridge'>Blackridge Building II</div>\n        <div className='gsemLogo' onClick={this.handleClick}></div>\n        <div className='mapSide'>\n            <img src={upperLevelImage} className='q1' alt='upper level map'></img>\n            <div className='q2'>\n                <h6>THIS LEVEL</h6>\n                {upstairsTV ? upperSuites() :lowerSuites()}\n                <h6>{upstairsTV ? 'DOWNSTAIRS' : 'UPSTAIRS'}</h6>\n                {upstairsTV ? lowerSuites() : upperSuites()}\n\n            </div>\n        </div>\n        <div className='advertisementSide'>\n            <iframe\n                id='advertisement_upper_screen'\n                title='advertisement_upper_screen'\n                // src={`https://www.youtube.com/embed/${videoData[0]}`}\n                src={`https://www.youtube.com/embed/OcLbZFS4Ge8`}\n                frameBorder=\"0\" \n                allow=\"accelerometer; loop; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                allowFullScreen>\n            </iframe>\n            <div>To advertise here contact Suite 505</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UpperPage;\n","import React, { Component } from 'react';\nimport UpperPage from './UpperPage'\n\nclass App extends Component {\n  render() {\n    return (\n        < UpperPage />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport Home from './Pages/HomePage'\n\nfunction App (){\n  return < Home />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}